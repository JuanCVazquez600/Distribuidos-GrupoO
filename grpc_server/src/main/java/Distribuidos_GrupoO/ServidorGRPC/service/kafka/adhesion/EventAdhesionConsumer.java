package Distribuidos_GrupoO.ServidorGRPC.service.kafka.adhesion;

import Distribuidos_GrupoO.ServidorGRPC.model.AdhesionEvento;
import Distribuidos_GrupoO.ServidorGRPC.repository.AdhesionEventoRepository;
import Distribuidos_GrupoO.ServidorGRPC.service.implementation.EventoSolidarioServiceImplementation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Optional;

@Service
public class EventAdhesionConsumer {

    @Autowired
    private AdhesionEventoRepository adhesionEventoRepository;

    @Autowired
    private EventoSolidarioServiceImplementation eventoService;

    @Value("${app.organizacion.id:org-456}")
    private String organizationId;

    /**
     * Escucha adhesiones dirigidas a nuestra organizaci√≥n
     * Topic: adhesion-evento-org-456 (nuestro org ID)
     */
    @KafkaListener(topics = "adhesion-evento-org-456", groupId = "adhesiones-group", containerFactory = "eventAdhesionKafkaListenerContainerFactory")
    public void listen(EventAdhesion adhesion) {
        try {
            System.out.println("üì• Recibida adhesi√≥n de voluntario externo: " + adhesion);
            
            // Procesar la adhesi√≥n
            processVolunteerAdhesion(adhesion);
            
        } catch (Exception e) {
            System.err.println("‚ùå Error al procesar adhesi√≥n: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void processVolunteerAdhesion(EventAdhesion adhesion) {
        try {
            System.out.println("üîÑ Procesando adhesi√≥n para eventId: " + adhesion.getEventId());
            
            // Verificar que el evento existe
            if (!doesEventExist(adhesion.getEventId())) {
                System.err.println("‚ùå Evento no encontrado: " + adhesion.getEventId());
                return;
            }
            
            // Registrar la adhesi√≥n directamente en la tabla adhesion_evento
            registerVolunteerAdhesion(adhesion);
            
        } catch (Exception e) {
            System.err.println("‚ùå Error al procesar adhesi√≥n: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private boolean doesEventExist(String eventId) {
        try {
            Integer eventIdInt = Integer.parseInt(eventId);
            return eventoService.buscarPorId(eventIdInt) != null;
        } catch (Exception e) {
            System.out.println("‚ùå Evento no encontrado: " + eventId);
            return false;
        }
    }

    private void registerVolunteerAdhesion(EventAdhesion adhesion) {
        try {
            System.out.println("üîÑ Registrando adhesi√≥n en tabla adhesion_evento");
            
            // Verificar si ya existe una adhesi√≥n para este evento y voluntario
            Optional<AdhesionEvento> existingAdhesion = adhesionEventoRepository.findByEventIdAndIdVoluntario(
                adhesion.getEventId(), generateVolunteerId(adhesion)
            );
            
            if (existingAdhesion.isPresent()) {
                System.out.println("‚ö†Ô∏è Ya existe una adhesi√≥n para este evento y voluntario");
                return;
            }
            
            // Crear nueva adhesi√≥n
            AdhesionEvento nuevaAdhesion = new AdhesionEvento();
            nuevaAdhesion.setEventId(adhesion.getEventId());
            nuevaAdhesion.setIdOrganizacionVoluntario(adhesion.getIdOrganizacion());
            nuevaAdhesion.setIdVoluntario(generateVolunteerId(adhesion));
            nuevaAdhesion.setNombre(adhesion.getNombre());
            nuevaAdhesion.setApellido(adhesion.getApellido());
            nuevaAdhesion.setEmail(adhesion.getEmail());
            nuevaAdhesion.setTelefono(adhesion.getTelefono());
            nuevaAdhesion.setEstado(AdhesionEvento.EstadoAdhesion.PENDIENTE);
            nuevaAdhesion.setFechaAdhesion(LocalDateTime.now());
            
            // Guardar en base de datos
            AdhesionEvento adhesionGuardada = adhesionEventoRepository.save(nuevaAdhesion);
            
            System.out.println("‚úÖ Adhesi√≥n registrada correctamente");
            System.out.println("üìã ID: " + adhesionGuardada.getId());
            System.out.println("üéØ Evento: " + adhesionGuardada.getEventId());
            System.out.println("üìß Email: " + adhesionGuardada.getEmail());
            
            // Enviar confirmaci√≥n
            sendConfirmationEmail(adhesion);
            
        } catch (Exception e) {
            System.err.println("‚ùå Error al registrar adhesi√≥n: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private String generateVolunteerId(EventAdhesion adhesion) {
        // Generar un ID √∫nico para el voluntario basado en email
        return adhesion.getIdOrganizacion() + "-" + adhesion.getEmail().hashCode();
    }

    private void sendConfirmationEmail(EventAdhesion adhesion) {
        try {
            // Enviar email de confirmaci√≥n
            System.out.println("üìß Enviando confirmaci√≥n por email a: " + adhesion.getEmail());
            // Aqu√≠ ir√≠a la l√≥gica de env√≠o de email
            System.out.println("‚úÖ Email de confirmaci√≥n enviado");
        } catch (Exception e) {
            System.err.println("‚ùå Error al enviar email: " + e.getMessage());
        }
    }
}